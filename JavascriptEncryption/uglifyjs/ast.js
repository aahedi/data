"use strict";function DEFNODE(t,e,o,n){arguments.length<4&&(n=AST_Node),e=e?e.split(/\s+/):[];var i=e;n&&n.PROPS&&(e=e.concat(n.PROPS));for(var a="return function AST_"+t+"(props){ if (props) { ",s=e.length;--s>=0;)a+="this."+e[s]+" = props."+e[s]+";";var r=n&&new n;(r&&r.initialize||o&&o.initialize)&&(a+="this.initialize();"),a+="}}";var l=Function(a)();if(r&&(l.prototype=r,l.BASE=n),n&&n.SUBCLASSES.push(l),l.prototype.CTOR=l,l.PROPS=e||null,l.SELF_PROPS=i,l.SUBCLASSES=[],t&&(l.prototype.TYPE=l.TYPE=t),o)for(s in o)o.hasOwnProperty(s)&&(/^\$/.test(s)?l[s.substr(1)]=o[s]:l.prototype[s]=o[s]);return l.DEFMETHOD=function(t,e){this.prototype[t]=e},l}function walk_body(t,e){t.body instanceof AST_Statement?t.body._walk(e):t.body.forEach(function(t){t._walk(e)})}function TreeWalker(t){this.visit=t,this.stack=[]}var AST_Token=DEFNODE("Token","type value line col pos endpos nlb comments_before file",{},null),AST_Node=DEFNODE("Node","start end",{clone:function(){return new this.CTOR(this)},$documentation:"Base class of all AST nodes",$propdoc:{start:"[AST_Token] The first token of this node",end:"[AST_Token] The last token of this node"},_walk:function(t){return t._visit(this)},walk:function(t){return this._walk(t)}},null);AST_Node.warn_function=null,AST_Node.warn=function(t,e){AST_Node.warn_function&&AST_Node.warn_function(string_template(t,e))};var AST_Statement=DEFNODE("Statement",null,{$documentation:"Base class of all statements"}),AST_Debugger=DEFNODE("Debugger",null,{$documentation:"Represents a debugger statement"},AST_Statement),AST_Directive=DEFNODE("Directive","value scope",{$documentation:'Represents a directive, like "use strict";',$propdoc:{value:"[string] The value of this directive as a plain string (it's not an AST_String!)",scope:"[AST_Scope/S] The scope that this directive affects"}},AST_Statement),AST_SimpleStatement=DEFNODE("SimpleStatement","body",{$documentation:"A statement consisting of an expression, i.e. a = 1 + 2",$propdoc:{body:"[AST_Node] an expression node (should not be instanceof AST_Statement)"},_walk:function(t){return t._visit(this,function(){this.body._walk(t)})}},AST_Statement),AST_Block=DEFNODE("Block","body",{$documentation:"A body of statements (usually bracketed)",$propdoc:{body:"[AST_Statement*] an array of statements"},_walk:function(t){return t._visit(this,function(){walk_body(this,t)})}},AST_Statement),AST_BlockStatement=DEFNODE("BlockStatement",null,{$documentation:"A block statement"},AST_Block),AST_EmptyStatement=DEFNODE("EmptyStatement",null,{$documentation:"The empty statement (empty block or simply a semicolon)",_walk:function(t){return t._visit(this)}},AST_Statement),AST_StatementWithBody=DEFNODE("StatementWithBody","body",{$documentation:"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`",$propdoc:{body:"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement"},_walk:function(t){return t._visit(this,function(){this.body._walk(t)})}},AST_Statement),AST_LabeledStatement=DEFNODE("LabeledStatement","label",{$documentation:"Statement with a label",$propdoc:{label:"[AST_Label] a label definition"},_walk:function(t){return t._visit(this,function(){this.label._walk(t),this.body._walk(t)})}},AST_StatementWithBody),AST_IterationStatement=DEFNODE("IterationStatement",null,{$documentation:"Internal class.  All loops inherit from it."},AST_StatementWithBody),AST_DWLoop=DEFNODE("DWLoop","condition",{$documentation:"Base class for do/while statements",$propdoc:{condition:"[AST_Node] the loop condition.  Should not be instanceof AST_Statement"},_walk:function(t){return t._visit(this,function(){this.condition._walk(t),this.body._walk(t)})}},AST_IterationStatement),AST_Do=DEFNODE("Do",null,{$documentation:"A `do` statement"},AST_DWLoop),AST_While=DEFNODE("While",null,{$documentation:"A `while` statement"},AST_DWLoop),AST_For=DEFNODE("For","init condition step",{$documentation:"A `for` statement",$propdoc:{init:"[AST_Node?] the `for` initialization code, or null if empty",condition:"[AST_Node?] the `for` termination clause, or null if empty",step:"[AST_Node?] the `for` update clause, or null if empty"},_walk:function(t){return t._visit(this,function(){this.init&&this.init._walk(t),this.condition&&this.condition._walk(t),this.step&&this.step._walk(t),this.body._walk(t)})}},AST_IterationStatement),AST_ForIn=DEFNODE("ForIn","init name object",{$documentation:"A `for ... in` statement",$propdoc:{init:"[AST_Node] the `for/in` initialization code",name:"[AST_SymbolRef?] the loop variable, only if `init` is AST_Var",object:"[AST_Node] the object that we're looping through"},_walk:function(t){return t._visit(this,function(){this.init._walk(t),this.object._walk(t),this.body._walk(t)})}},AST_IterationStatement),AST_With=DEFNODE("With","expression",{$documentation:"A `with` statement",$propdoc:{expression:"[AST_Node] the `with` expression"},_walk:function(t){return t._visit(this,function(){this.expression._walk(t),this.body._walk(t)})}},AST_StatementWithBody),AST_Scope=DEFNODE("Scope","directives variables functions uses_with uses_eval parent_scope enclosed cname",{$documentation:"Base class for all statements introducing a lexical scope",$propdoc:{directives:"[string*/S] an array of directives declared in this scope",variables:"[Object/S] a map of name -> SymbolDef for all variables/functions defined in this scope",functions:"[Object/S] like `variables`, but only lists function declarations",uses_with:"[boolean/S] tells whether this scope uses the `with` statement",uses_eval:"[boolean/S] tells whether this scope contains a direct call to the global `eval`",parent_scope:"[AST_Scope?/S] link to the parent scope",enclosed:"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes",cname:"[integer/S] current index for mangling variables (used internally by the mangler)"}},AST_Block),AST_Toplevel=DEFNODE("Toplevel","globals",{$documentation:"The toplevel scope",$propdoc:{globals:"[Object/S] a map of name -> SymbolDef for all undeclared names"},wrap_enclose:function(t){var e=this,o=[],n=[];t.forEach(function(t){var e=t.lastIndexOf(":");o.push(t.substr(0,e)),n.push(t.substr(e+1))});var i="(function("+n.join(",")+"){ '$ORIG'; })("+o.join(",")+")";return i=parse(i),i=i.transform(new TreeTransformer(function(t){return t instanceof AST_Directive&&"$ORIG"==t.value?MAP.splice(e.body):void 0}))},wrap_commonjs:function(t,e){var o=this,n=[];e&&(o.figure_out_scope(),o.walk(new TreeWalker(function(t){t instanceof AST_SymbolDeclaration&&t.definition().global&&(find_if(function(e){return e.name==t.name},n)||n.push(t))})));var i="(function(exports, global){ global['"+t+"'] = exports; '$ORIG'; '$EXPORTS'; }({}, (function(){return this}())))";return i=parse(i),i=i.transform(new TreeTransformer(function(t){if(t instanceof AST_SimpleStatement&&(t=t.body,t instanceof AST_String))switch(t.getValue()){case"$ORIG":return MAP.splice(o.body);case"$EXPORTS":var e=[];return n.forEach(function(t){e.push(new AST_SimpleStatement({body:new AST_Assign({left:new AST_Sub({expression:new AST_SymbolRef({name:"exports"}),property:new AST_String({value:t.name})}),operator:"=",right:new AST_SymbolRef(t)})}))}),MAP.splice(e)}}))}},AST_Scope),AST_Lambda=DEFNODE("Lambda","name argnames uses_arguments",{$documentation:"Base class for functions",$propdoc:{name:"[AST_SymbolDeclaration?] the name of this function",argnames:"[AST_SymbolFunarg*] array of function arguments",uses_arguments:"[boolean/S] tells whether this function accesses the arguments array"},_walk:function(t){return t._visit(this,function(){this.name&&this.name._walk(t),this.argnames.forEach(function(e){e._walk(t)}),walk_body(this,t)})}},AST_Scope),AST_Accessor=DEFNODE("Accessor",null,{$documentation:"A setter/getter function.  The `name` property is always null."},AST_Lambda),AST_Function=DEFNODE("Function",null,{$documentation:"A function expression"},AST_Lambda),AST_Defun=DEFNODE("Defun",null,{$documentation:"A function definition"},AST_Lambda),AST_Jump=DEFNODE("Jump",null,{$documentation:"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)"},AST_Statement),AST_Exit=DEFNODE("Exit","value",{$documentation:"Base class for “exits” (`return` and `throw`)",$propdoc:{value:"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return"},_walk:function(t){return t._visit(this,this.value&&function(){this.value._walk(t)})}},AST_Jump),AST_Return=DEFNODE("Return",null,{$documentation:"A `return` statement"},AST_Exit),AST_Throw=DEFNODE("Throw",null,{$documentation:"A `throw` statement"},AST_Exit),AST_LoopControl=DEFNODE("LoopControl","label",{$documentation:"Base class for loop control statements (`break` and `continue`)",$propdoc:{label:"[AST_LabelRef?] the label, or null if none"},_walk:function(t){return t._visit(this,this.label&&function(){this.label._walk(t)})}},AST_Jump),AST_Break=DEFNODE("Break",null,{$documentation:"A `break` statement"},AST_LoopControl),AST_Continue=DEFNODE("Continue",null,{$documentation:"A `continue` statement"},AST_LoopControl),AST_If=DEFNODE("If","condition alternative",{$documentation:"A `if` statement",$propdoc:{condition:"[AST_Node] the `if` condition",alternative:"[AST_Statement?] the `else` part, or null if not present"},_walk:function(t){return t._visit(this,function(){this.condition._walk(t),this.body._walk(t),this.alternative&&this.alternative._walk(t)})}},AST_StatementWithBody),AST_Switch=DEFNODE("Switch","expression",{$documentation:"A `switch` statement",$propdoc:{expression:"[AST_Node] the `switch` “discriminant”"},_walk:function(t){return t._visit(this,function(){this.expression._walk(t),walk_body(this,t)})}},AST_Block),AST_SwitchBranch=DEFNODE("SwitchBranch",null,{$documentation:"Base class for `switch` branches"},AST_Block),AST_Default=DEFNODE("Default",null,{$documentation:"A `default` switch branch"},AST_SwitchBranch),AST_Case=DEFNODE("Case","expression",{$documentation:"A `case` switch branch",$propdoc:{expression:"[AST_Node] the `case` expression"},_walk:function(t){return t._visit(this,function(){this.expression._walk(t),walk_body(this,t)})}},AST_SwitchBranch),AST_Try=DEFNODE("Try","bcatch bfinally",{$documentation:"A `try` statement",$propdoc:{bcatch:"[AST_Catch?] the catch block, or null if not present",bfinally:"[AST_Finally?] the finally block, or null if not present"},_walk:function(t){return t._visit(this,function(){walk_body(this,t),this.bcatch&&this.bcatch._walk(t),this.bfinally&&this.bfinally._walk(t)})}},AST_Block),AST_Catch=DEFNODE("Catch","argname",{$documentation:"A `catch` node; only makes sense as part of a `try` statement",$propdoc:{argname:"[AST_SymbolCatch] symbol for the exception"},_walk:function(t){return t._visit(this,function(){this.argname._walk(t),walk_body(this,t)})}},AST_Block),AST_Finally=DEFNODE("Finally",null,{$documentation:"A `finally` node; only makes sense as part of a `try` statement"},AST_Block),AST_Definitions=DEFNODE("Definitions","definitions",{$documentation:"Base class for `var` or `const` nodes (variable declarations/initializations)",$propdoc:{definitions:"[AST_VarDef*] array of variable definitions"},_walk:function(t){return t._visit(this,function(){this.definitions.forEach(function(e){e._walk(t)})})}},AST_Statement),AST_Var=DEFNODE("Var",null,{$documentation:"A `var` statement"},AST_Definitions),AST_Const=DEFNODE("Const",null,{$documentation:"A `const` statement"},AST_Definitions),AST_VarDef=DEFNODE("VarDef","name value",{$documentation:"A variable declaration; only appears in a AST_Definitions node",$propdoc:{name:"[AST_SymbolVar|AST_SymbolConst] name of the variable",value:"[AST_Node?] initializer, or null of there's no initializer"},_walk:function(t){return t._visit(this,function(){this.name._walk(t),this.value&&this.value._walk(t)})}}),AST_Call=DEFNODE("Call","expression args",{$documentation:"A function call expression",$propdoc:{expression:"[AST_Node] expression to invoke as function",args:"[AST_Node*] array of arguments"},_walk:function(t){return t._visit(this,function(){this.expression._walk(t),this.args.forEach(function(e){e._walk(t)})})}}),AST_New=DEFNODE("New",null,{$documentation:"An object instantiation.  Derives from a function call since it has exactly the same properties"},AST_Call),AST_Seq=DEFNODE("Seq","car cdr",{$documentation:"A sequence expression (two comma-separated expressions)",$propdoc:{car:"[AST_Node] first element in sequence",cdr:"[AST_Node] second element in sequence"},$cons:function(t,e){var o=new AST_Seq(t);return o.car=t,o.cdr=e,o},$from_array:function(t){if(0==t.length)return null;if(1==t.length)return t[0].clone();for(var e=null,o=t.length;--o>=0;)e=AST_Seq.cons(t[o],e);for(var n=e;n;){if(n.cdr&&!n.cdr.cdr){n.cdr=n.cdr.car;break}n=n.cdr}return e},to_array:function(){for(var t=this,e=[];t;){if(e.push(t.car),t.cdr&&!(t.cdr instanceof AST_Seq)){e.push(t.cdr);break}t=t.cdr}return e},add:function(t){for(var e=this;e;){if(!(e.cdr instanceof AST_Seq)){var o=AST_Seq.cons(e.cdr,t);return e.cdr=o}e=e.cdr}},_walk:function(t){return t._visit(this,function(){this.car._walk(t),this.cdr&&this.cdr._walk(t)})}}),AST_PropAccess=DEFNODE("PropAccess","expression property",{$documentation:'Base class for property access expressions, i.e. `a.foo` or `a["foo"]`',$propdoc:{expression:"[AST_Node] the “container” expression",property:"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node"}}),AST_Dot=DEFNODE("Dot",null,{$documentation:"A dotted property access expression",_walk:function(t){return t._visit(this,function(){this.expression._walk(t)})}},AST_PropAccess),AST_Sub=DEFNODE("Sub",null,{$documentation:'Index-style property access, i.e. `a["foo"]`',_walk:function(t){return t._visit(this,function(){this.expression._walk(t),this.property._walk(t)})}},AST_PropAccess),AST_Unary=DEFNODE("Unary","operator expression",{$documentation:"Base class for unary expressions",$propdoc:{operator:"[string] the operator",expression:"[AST_Node] expression that this unary operator applies to"},_walk:function(t){return t._visit(this,function(){this.expression._walk(t)})}}),AST_UnaryPrefix=DEFNODE("UnaryPrefix",null,{$documentation:"Unary prefix expression, i.e. `typeof i` or `++i`"},AST_Unary),AST_UnaryPostfix=DEFNODE("UnaryPostfix",null,{$documentation:"Unary postfix expression, i.e. `i++`"},AST_Unary),AST_Binary=DEFNODE("Binary","left operator right",{$documentation:"Binary expression, i.e. `a + b`",$propdoc:{left:"[AST_Node] left-hand side expression",operator:"[string] the operator",right:"[AST_Node] right-hand side expression"},_walk:function(t){return t._visit(this,function(){this.left._walk(t),this.right._walk(t)})}}),AST_Conditional=DEFNODE("Conditional","condition consequent alternative",{$documentation:"Conditional expression using the ternary operator, i.e. `a ? b : c`",$propdoc:{condition:"[AST_Node]",consequent:"[AST_Node]",alternative:"[AST_Node]"},_walk:function(t){return t._visit(this,function(){this.condition._walk(t),this.consequent._walk(t),this.alternative._walk(t)})}}),AST_Assign=DEFNODE("Assign",null,{$documentation:"An assignment expression — `a = b + 5`"},AST_Binary),AST_Array=DEFNODE("Array","elements",{$documentation:"An array literal",$propdoc:{elements:"[AST_Node*] array of elements"},_walk:function(t){return t._visit(this,function(){this.elements.forEach(function(e){e._walk(t)})})}}),AST_Object=DEFNODE("Object","properties",{$documentation:"An object literal",$propdoc:{properties:"[AST_ObjectProperty*] array of properties"},_walk:function(t){return t._visit(this,function(){this.properties.forEach(function(e){e._walk(t)})})}}),AST_ObjectProperty=DEFNODE("ObjectProperty","key value",{$documentation:"Base class for literal object properties",$propdoc:{key:"[string] the property name converted to a string for ObjectKeyVal.  For setters and getters this is an arbitrary AST_Node.",value:"[AST_Node] property value.  For setters and getters this is an AST_Function."},_walk:function(t){return t._visit(this,function(){this.value._walk(t)})}}),AST_ObjectKeyVal=DEFNODE("ObjectKeyVal",null,{$documentation:"A key: value object property"},AST_ObjectProperty),AST_ObjectSetter=DEFNODE("ObjectSetter",null,{$documentation:"An object setter property"},AST_ObjectProperty),AST_ObjectGetter=DEFNODE("ObjectGetter",null,{$documentation:"An object getter property"},AST_ObjectProperty),AST_Symbol=DEFNODE("Symbol","scope name thedef",{$propdoc:{name:"[string] name of this symbol",scope:"[AST_Scope/S] the current scope (not necessarily the definition scope)",thedef:"[SymbolDef/S] the definition of this symbol"},$documentation:"Base class for all symbols"}),AST_SymbolAccessor=DEFNODE("SymbolAccessor",null,{$documentation:"The name of a property accessor (setter/getter function)"},AST_Symbol),AST_SymbolDeclaration=DEFNODE("SymbolDeclaration","init",{$documentation:"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)",$propdoc:{init:"[AST_Node*/S] array of initializers for this declaration."}},AST_Symbol),AST_SymbolVar=DEFNODE("SymbolVar",null,{$documentation:"Symbol defining a variable"},AST_SymbolDeclaration),AST_SymbolConst=DEFNODE("SymbolConst",null,{$documentation:"A constant declaration"},AST_SymbolDeclaration),AST_SymbolFunarg=DEFNODE("SymbolFunarg",null,{$documentation:"Symbol naming a function argument"},AST_SymbolVar),AST_SymbolDefun=DEFNODE("SymbolDefun",null,{$documentation:"Symbol defining a function"},AST_SymbolDeclaration),AST_SymbolLambda=DEFNODE("SymbolLambda",null,{$documentation:"Symbol naming a function expression"},AST_SymbolDeclaration),AST_SymbolCatch=DEFNODE("SymbolCatch",null,{$documentation:"Symbol naming the exception in catch"},AST_SymbolDeclaration),AST_Label=DEFNODE("Label","references",{$documentation:"Symbol naming a label (declaration)",$propdoc:{references:"[AST_LoopControl*] a list of nodes referring to this label"},initialize:function(){this.references=[],this.thedef=this}},AST_Symbol),AST_SymbolRef=DEFNODE("SymbolRef",null,{$documentation:"Reference to some symbol (not definition/declaration)"},AST_Symbol),AST_LabelRef=DEFNODE("LabelRef",null,{$documentation:"Reference to a label symbol"},AST_Symbol),AST_This=DEFNODE("This",null,{$documentation:"The `this` symbol"},AST_Symbol),AST_Constant=DEFNODE("Constant",null,{$documentation:"Base class for all constants",getValue:function(){return this.value}}),AST_String=DEFNODE("String","value",{$documentation:"A string literal",$propdoc:{value:"[string] the contents of this string"}},AST_Constant),AST_Number=DEFNODE("Number","value",{$documentation:"A number literal",$propdoc:{value:"[number] the numeric value"}},AST_Constant),AST_RegExp=DEFNODE("RegExp","value",{$documentation:"A regexp literal",$propdoc:{value:"[RegExp] the actual regexp"}},AST_Constant),AST_Atom=DEFNODE("Atom",null,{$documentation:"Base class for atoms"},AST_Constant),AST_Null=DEFNODE("Null",null,{$documentation:"The `null` atom",value:null},AST_Atom),AST_NaN=DEFNODE("NaN",null,{$documentation:"The impossible value",value:0/0},AST_Atom),AST_Undefined=DEFNODE("Undefined",null,{$documentation:"The `undefined` value",value:void 0},AST_Atom),AST_Hole=DEFNODE("Hole",null,{$documentation:"A hole in an array",value:void 0},AST_Atom),AST_Infinity=DEFNODE("Infinity",null,{$documentation:"The `Infinity` value",value:1/0},AST_Atom),AST_Boolean=DEFNODE("Boolean",null,{$documentation:"Base class for booleans"},AST_Atom),AST_False=DEFNODE("False",null,{$documentation:"The `false` atom",value:!1},AST_Boolean),AST_True=DEFNODE("True",null,{$documentation:"The `true` atom",value:!0},AST_Boolean);TreeWalker.prototype={_visit:function(t,e){this.stack.push(t);var o=this.visit(t,e?function(){e.call(t)}:noop);return!o&&e&&e.call(t),this.stack.pop(),o},parent:function(t){return this.stack[this.stack.length-2-(t||0)]},push:function(t){this.stack.push(t)},pop:function(){return this.stack.pop()},self:function(){return this.stack[this.stack.length-1]},find_parent:function(t){for(var e=this.stack,o=e.length;--o>=0;){var n=e[o];if(n instanceof t)return n}},has_directive:function(t){return this.find_parent(AST_Scope).has_directive(t)},in_boolean_context:function(){for(var t=this.stack,e=t.length,o=t[--e];e>0;){var n=t[--e];if(n instanceof AST_If&&n.condition===o||n instanceof AST_Conditional&&n.condition===o||n instanceof AST_DWLoop&&n.condition===o||n instanceof AST_For&&n.condition===o||n instanceof AST_UnaryPrefix&&"!"==n.operator&&n.expression===o)return!0;if(!(n instanceof AST_Binary)||"&&"!=n.operator&&"||"!=n.operator)return!1;o=n}},loopcontrol_target:function(t){var e=this.stack;if(t)for(var o=e.length;--o>=0;){var n=e[o];if(n instanceof AST_LabeledStatement&&n.label.name==t.name)return n.body}else for(var o=e.length;--o>=0;){var n=e[o];if(n instanceof AST_Switch||n instanceof AST_IterationStatement)return n}}};